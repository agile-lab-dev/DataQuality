Sources: [
  {
    id = "GOT_B"
    type = "HDFS"
    path = "./docs/examples/data/battles.csv"
    delimiter = ","
    header = true
    fileType = "csv"
    keyFields = ["name","year","defender_king"]
  },
  {
    id = "GOT_D"
    type = "HDFS"
    path = "./docs/examples/data/character-deaths.csv"
    delimiter = ","
    header = true
    fileType = "csv"
  },
  {
    id = "customer"
    type = "HDFS"
    path = "./docs/examples/data/customer.csv"
    delimiter = "|"
    header = false
    fileType = "csv"
  },
]

VirtualSources: [
  {
    id = "DFB"
    type = "JOIN-SQL"
    parentSources=["GOT_B","GOT_D"],
    sql ="select avg(length(d.Name)) as NAMES_LENGTH from GOT_D as d join GOT_B as b on d.Allegiances=b.attacker_1"
    save = true
  },
  {
    id = "BTL_FILTERED"
    type = "FILTER-SQL"
    parentSources=["GOT_B"],
    sql ="select * from GOT_B"
    keyFields = ["name", "year","battle_number","attacker_king","defender_king"]
    save = true
  },
  {
    id = "TEST_FILTERED"
    type = "FILTER-SQL"
    parentSources=["GOT_B"],
    sql ="select * from GOT_B"
    save = true
  },
]

LoadChecks: [
  {
    id = "customer_encoding_check"
    type = "ENCODING"
    source = "customer"
    option = "UTF-8"
  },
  {
    id = "customer_exact_column"
    type = "EXACT_COLUMN_NUM"
    source = "customer"
    option = 1
  },
  {
    id = "customer_min_column"
    type = "MIN_COLUMN_NUM"
    source = "customer"
    option = 2
  },
  {
    id = "customer_file_type"
    type = "FILE_TYPE"
    source = "customer"
    option = "avro"
  },
  {
    id = "customer_file_existence"
    type = "EXIST"
    source = "customer"
    option = true
  }
]

Metrics: [
  {
    id: "row_count"
    name: "ROW_COUNT"
    type: "FILE"
    description: "rowcount"
    config: {
      file: "GOT_B"
    }
  },
  {
    id: "customer_row_count"
    name: "ROW_COUNT"
    type: "FILE"
    description: "rowcount"
    config: {
      file: "customer"
    }
  },
  {
    id: "null_values"
    name: "NULL_VALUES"
    type: "COLUMN"
    description: "null values in column attacker_size"
    config: {
      file: "customer",
      columns: ["attacker_size"],
      positions: [1]
    }
  },
  {
    id: "null_values_col"
    name: "NULL_VALUES"
    type: "COLUMN"
    description: "null values in column attacker_size"
    config: {
      file: "customer",
      columns: ["C0"]
    }
  },
  {
    id: "average"
    name: "AVG_NUMBER"
    type: "COLUMN"
    description: "avg"
    config: {
      file: "GOT_B",
      columns: ["attacker_size"]
    }
  },
  {
    id: "y_std"
    name: "STD_NUMBER"
    type: "COLUMN"
    description: "std"
    config: {
      file: "GOT_B",
      columns: ["year"]
    }
  },
  {
    id: "y_avg"
    name: "AVG_NUMBER"
    type: "COLUMN"
    description: "std"
    config: {
      file: "GOT_B",
      columns: ["year"]
    }
  },
  {
    id: "1011"
    name: "MEDIAN_VALUE"
    type: "COLUMN"
    description: "std"
    config: {
      file: "GOT_B",
      columns: ["year"]
    }
  },
  {
    id: "topn_3"
    name: "TOP_N"
    type: "COLUMN"
    description: "std"
    config: {
      file: "GOT_B",
      columns: ["attacker_king"]
      params: {targetNumber:3}
    }
  },
  {
    id: "topn_6"
    name: "TOP_N"
    type: "COLUMN"
    description: "std"
    config: {
      file: "GOT_B",
      columns: ["attacker_king"]
      params: {targetNumber:6}
    }
  },
  {
    id: "topn_3s"
    name: "TOP_N"
    type: "COLUMN"
    description: "std"
    config: {
      file: "GOT_B",
      columns: ["attacker_king"]
      params: {targetNumber:3}
    }
  },
  {
    id: "col_eq_king"
    name: "COLUMN_EQ"
    type: "COLUMN"
    description: "std"
    config: {
      file: "GOT_B",
      columns: ["attacker_king","defender_king"]
    }
  },
  {
    id: "col_eq_kings"
    name: "COLUMN_EQ"
    type: "COLUMN"
    description: "std"
    config: {
      file: "GOT_B",
      columns: ["attacker_king","defender_king"]
    }
  },
  {
    id: "col_eq_kings_lev"
    name: "LEVENSHTEIN_DISTANCE"
    type: "COLUMN"
    description: "std"
    config: {
      file: "GOT_B",
      columns: ["attacker_king","year"]
      params: {
        threshold:"0.1"
      }
    }
  },
  {
    id: "col_eq_kings_lev99"
    name: "LEVENSHTEIN_DISTANCE"
    type: "COLUMN"
    description: "std"
    config: {
      file: "GOT_B",
      columns: ["attacker_king","defender_king"]
      params: {
        threshold:"0.99"
      }
    }
  },
]

ComposedMetrics: [
  {
    id: "SE"
    name: "qwe"
    description: "qwe"
    formula: "$row_count+2"
  },
]

Checks: [
  {
    id: "teracheck"
    type: "snapshot"
    subtype: "GREATER_THAN"
    description: "check for number rows limit with threshold on table A"
    name:"row_check"
    config: {
      metrics: ["row_count"]
      params: {threshold: "10"}
    }
  },
  {
    "config" : {
      "metrics" : [
        "row_count"
      ],
      "params" : {
        "threshold" : "0.5",
        "timewindow" : "2"
      },
      "rule" : "record"
    },
    "description" : "some basic trend",
    "id" : "trend_check",
    "subtype" : "AVERAGE_BOUND_FULL_CHECK",
    "type" : "trend"
  },
  {
    "config" : {
      "metrics" : [
        "topn_3s"
      ],
      "params" : {
        "threshold" : "0.5",
        "timewindow" : "2",
        targetNumber :  "3"
      },
      "rule" : "record"
    },
    "description" : "some basic trend",
    "id" : "trend_check",
    "subtype" : "TOP_N_RANK_CHECK",
    "type" : "trend"
  }
]

Targets: [
  {
    type: "FILE_METRICS"
    config: {
      fileFormat: "csv"
      path: "./tmp/results"
      delimiter: ","
    }
  },
  {
    type: "COLUMN_METRICS"
    config: {
      fileFormat: "csv"
      path: "./tmp/results"
      delimiter: ","
    }
  },
  {
    type: "COMPOSED_METRICS"
    config: {
      fileFormat: "csv"
      path: "./tmp/results"
      delimiter: ","
    }
  },
  {
    type: "CHECKS"
    config: {
      fileFormat: "csv"
      path: "./tmp/results"
      delimiter: ","
    }
  },
  {
    type: "LOAD_CHECKS"
    config: {
      fileFormat: "csv"
      path: "./tmp/results"
      delimiter: ","
    }
  }
]

Postprocessing: [
  {
    mode: "enrich"
    config: {
      source: "BTL_FILTERED"
      metrics: ["y_avg","1011"]
      checks: ["teracheck"]
      extra: {
        pasta: "test"
        person: "Rocco"
        ingridient: "Cream"
        test: "Test"
      }

      saveTo: {
        fileName: "tera_enriched"
        fileFormat: "csv"
        path: "./tmp/postproc"
        delimiter: ","
      }
    }
  },
  {
    mode: "transpose_by_key"
    config: {
      keyColumns: ["name"]
      source: "tera_enriched"
      saveTo: {
        fileName: "tera_transposed"
        fileFormat: "csv"
        path: "./tmp/postproc"
        delimiter: ","
        quoted: true
      }
    }
  },
  {
    mode: "transpose_by_column"
    config: {
      source: "tera_enriched"
      numberOfColumns: 5
      saveTo: {
        fileName: "tera_headless"
        fileFormat: "csv"
        path: "./tmp/postproc"
        delimiter: ","
      }
    }
  },
  {
    mode: "enrich"
    config: {
      metrics: ["y_avg","1011"]
      checks: ["teracheck"]
      extra: {
        pasta: "test"
        PERSON: "Rocco"
        ingridient: "Cream"
        test: "Test"
      }
      saveTo: {
        fileName: "tera_empty"
        fileFormat: "csv"
        path: "./tmp/postproc"
        delimiter: ","
      }
    }
  },
  {
    mode: "transpose_by_column"
    config: {
      source: "tera_empty"
      numberOfColumns: 10
      saveTo: {
        fileName: "empty_headless"
        fileFormat: "csv"
        path: "./tmp/postproc"
        delimiter: ","
      }
    }
  },
  {
    mode: "transpose_by_column"
    config: {
      source: "tera_empty"
      numberOfColumns: 10
      keyColumns: ["y_avg","1011"]
      saveTo: {
        fileName: "empty_headless_keyed"
        fileFormat: "csv"
        path: "./tmp/postproc"
        delimiter: ","
      }
    }
  },
  {
    mode: "arrange"
    config: {
      source: "tera_enriched"
      columnOrder: [{"battle_number":"double"}, "name", {"y_avg":"int"}]
      saveTo: {
        fileName: "tera_arranged"
        fileFormat: "csv"
        path: "./tmp/postproc"
        delimiter: ","
      }
    }
  }
]
